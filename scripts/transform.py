import pandas as pd
from sqlalchemy import create_engine
from transform import transform_all

def create_connection(server='localhost\\SQLEXPRESS', database='NetflixDB', username=None, password=None):
    """
    Crea conexi√≥n a SQL Server usando SQLAlchemy.
    
    Args:
        server: Servidor SQL Server (por defecto localhost\SQLEXPRESS)
        database: Nombre de la base de datos
        username: Usuario (None para autenticaci√≥n Windows)
        password: Contrase√±a (None para autenticaci√≥n Windows)
    
    Returns:
        Engine de SQLAlchemy
    """
    driver = 'ODBC Driver 17 for SQL Server'
    
    if username and password:
        # Autenticaci√≥n SQL Server
        connection_string = (
            f"mssql+pyodbc://{username}:{password}@{server}/{database}?"
            f"driver={driver.replace(' ', '+')}"
        )
    else:
        # Autenticaci√≥n Windows
        connection_string = (
            f"mssql+pyodbc://@{server}/{database}?"
            f"driver={driver.replace(' ', '+')}&trusted_connection=yes"
        )
    
    return create_engine(connection_string)

def load_tables_to_sql(tables_dict, engine):
    """
    Carga los DataFrames transformados a las tablas de SQL Server.
    
    Args:
        tables_dict: Diccionario con los DataFrames transformados
        engine: Engine de SQLAlchemy
    """
    # Orden de inserci√≥n: primero entidades, luego relaciones
    insert_order = ['titles', 'directors', 'casts', 'genres', 
                   'title_director', 'title_cast', 'title_genre']
    
    print("üíæ Cargando datos a SQL Server...")
    for table_name in insert_order:
        if table_name in tables_dict:
            df = tables_dict[table_name]
            try:
                df.to_sql(table_name, engine, if_exists='append', index=False)
                print(f"   ‚úÖ {table_name}: {len(df)} registros insertados")
            except Exception as e:
                print(f"   ‚ùå Error insertando {table_name}: {str(e)}")
                # Contin√∫a con las siguientes tablas aunque una falle
                continue

def test_connection(server='localhost\\SQLEXPRESS', database='NetflixDB', username=None, password=None):
    """
    Prueba la conexi√≥n a SQL Server antes de cargar datos.
    
    Returns:
        True si la conexi√≥n es exitosa, False en caso contrario
    """
    try:
        engine = create_connection(server, database, username, password)
        with engine.connect() as conn:
            result = conn.execute("SELECT 1")
            return True
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {str(e)}")
        return False

def main(server='localhost\\SQLEXPRESS', database='NetflixDB', username=None, password=None):
    """
    Funci√≥n principal que transforma y carga los datos.
    
    Args:
        server: Servidor SQL Server
        database: Nombre de la base de datos
        username: Usuario SQL Server (opcional)
        password: Contrase√±a SQL Server (opcional)
    """
    print("üöÄ Iniciando proceso ETL completo...")
    
    try:
        # 1. Probar conexi√≥n primero
        print(f"üîó Probando conexi√≥n a {server}/{database}...")
        if not test_connection(server, database, username, password):
            print("‚ùå No se pudo establecer conexi√≥n. Verifica:")
            print("   - Que SQL Server est√© ejecut√°ndose")
            print("   - Que la base de datos 'NetflixDB' exista")
            print("   - Que el driver ODBC est√© instalado")
            return False
        print("‚úÖ Conexi√≥n exitosa")
        
        # 2. Transformar datos usando el m√≥dulo transform
        print("\nüìä Transformando datos...")
        tables = transform_all()
        
        # Mostrar resumen de transformaci√≥n
        print("\nüìã Resumen de transformaci√≥n:")
        total_records = 0
        for table_name, df in tables.items():
            print(f"   - {table_name}: {len(df)} registros")
            total_records += len(df)
        print(f"   üìä Total de registros a insertar: {total_records:,}")
        
        # 3. Crear conexi√≥n a SQL Server
        print(f"\nüîó Conectando a SQL Server para carga de datos...")
        engine = create_connection(server, database, username, password)
        
        # 4. Cargar datos a SQL Server
        load_tables_to_sql(tables, engine)
        
        print("\nüéâ Proceso ETL completado exitosamente!")
        print("‚úÖ Todos los datos han sido cargados a la base de datos NetflixDB")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Error en el proceso ETL: {str(e)}")
        print("üí° Sugerencias:")
        print("   - Verifica que la base de datos NetflixDB exista")
        print("   - Aseg√∫rate de que las tablas est√©n creadas")
        print("   - Revisa que los datos de origen est√©n disponibles")
        return False

if __name__ == "__main__":
    # Opci√≥n 1: Ejecutar con autenticaci√≥n Windows (por defecto)
    success = main()
     
    # Opci√≥n 2: Ejecutar con credenciales espec√≠ficas (descomenta si es necesario)
    # success = main(
    #     server='localhost\\SQLEXPRESS',
    #     database='NetflixDB',
    #     username='tu_usuario',
    #     password='tu_contrase√±a'
    # )
    
    # Opci√≥n 3: Ejecutar con servidor remoto (descomenta si es necesario)
    # success = main(
    #     server='192.168.1.100\\SQLEXPRESS',  # IP del servidor remoto
    #     database='NetflixDB'
    # )
    
    if success:
        print("\nüéØ ¬°Listo! Puedes verificar los datos en SQL Server Management Studio")
    else:
        print("\n‚ö†Ô∏è  El proceso fall√≥. Revisa los errores anteriores.")